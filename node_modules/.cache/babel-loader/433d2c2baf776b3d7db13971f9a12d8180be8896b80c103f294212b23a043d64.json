{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jieli\\\\Desktop\\\\Coding\\\\Project\\\\MyBlog\\\\Frontend\\\\my-blog\\\\src\\\\Components\\\\TokenProvider.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TokenContext = /*#__PURE__*/createContext();\nexport function TokenProvider({\n  children\n}) {\n  _s();\n  const [token, setToken] = useState(localStorage.getItem('token'));\n\n  // 当 localStorage 中的 token 变化时，更新上下文中的 token\n  useEffect(() => {\n    const storedToken = localStorage.getItem('token');\n    if (storedToken !== token) {\n      setToken(storedToken);\n    }\n  }, [localStorage.getItem('token')]);\n  return /*#__PURE__*/_jsxDEV(TokenContext.Provider, {\n    value: {\n      token,\n      setToken\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n}\n_s(TokenProvider, \"rb+PrsxXDJR559c0lXAcRNiN4Fw=\");\n_c = TokenProvider;\nexport const useToken = () => {\n  _s2();\n  const context = useContext(TokenContext);\n  if (!context) {\n    throw new Error('useToken must be used within a TokenProvider');\n  }\n  return context;\n};\n_s2(useToken, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"TokenProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","jsxDEV","_jsxDEV","TokenContext","TokenProvider","children","_s","token","setToken","localStorage","getItem","storedToken","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useToken","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/jieli/Desktop/Coding/Project/MyBlog/Frontend/my-blog/src/Components/TokenProvider.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\r\n\r\nconst TokenContext = createContext();\r\n\r\nexport function TokenProvider({ children }) {\r\n  const [token, setToken] = useState(localStorage.getItem('token'));\r\n\r\n  // 当 localStorage 中的 token 变化时，更新上下文中的 token\r\n  useEffect(() => {\r\n    const storedToken = localStorage.getItem('token');\r\n    if (storedToken !== token) {\r\n      setToken(storedToken);\r\n    }\r\n  }, [localStorage.getItem('token')]);\r\n\r\n  return (\r\n    <TokenContext.Provider value={{ token, setToken }}>\r\n      {children}\r\n    </TokenContext.Provider>\r\n  );\r\n}\r\n\r\nexport const useToken = () => {\r\n  const context = useContext(TokenContext);\r\n  if (!context) {\r\n    throw new Error('useToken must be used within a TokenProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,YAAY,gBAAGN,aAAa,CAAC,CAAC;AAEpC,OAAO,SAASO,aAAaA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAC1C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAACS,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;;EAEjE;EACAX,SAAS,CAAC,MAAM;IACd,MAAMY,WAAW,GAAGF,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IACjD,IAAIC,WAAW,KAAKJ,KAAK,EAAE;MACzBC,QAAQ,CAACG,WAAW,CAAC;IACvB;EACF,CAAC,EAAE,CAACF,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;EAEnC,oBACER,OAAA,CAACC,YAAY,CAACS,QAAQ;IAACC,KAAK,EAAE;MAAEN,KAAK;MAAEC;IAAS,CAAE;IAAAH,QAAA,EAC/CA;EAAQ;IAAAS,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B;AAACX,EAAA,CAhBeF,aAAa;AAAAc,EAAA,GAAbd,aAAa;AAkB7B,OAAO,MAAMe,QAAQ,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC5B,MAAMC,OAAO,GAAGvB,UAAU,CAACK,YAAY,CAAC;EACxC,IAAI,CAACkB,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;EACjE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,QAAQ;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}